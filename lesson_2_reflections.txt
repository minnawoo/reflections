What happens when you initialize a repository? Why do you need to do it?

	A .git file is created. This is needed to track commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area allows the user to control which files will be part of the
	commit and thus repository history. It makes it possible to commit a number of files that is less than the number of files in the working directory. 

How can you use the staging area to make sure you have one commit per logical
change?
	You don't have to include every single file in the working directory in every
	commit. Since you may only change one or a few files each time.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Branches can let you experiment or create new versions with the original
	version intact. According to an expert, he creates a new branch every time
	he is about to do something different, like correcting a bug or make a new feature. He calls it a "development branch", or "unique feature branch", and
	"experimental branch" that you fully expect to break.

How do the diagrams help you visualize the branch structure?
	The diagrams help map out the linear sequence of commits that may belong to 
	multiple branches: it clearly shows when a new branch is made and whether that
	branch merges with another.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?