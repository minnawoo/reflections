When would you want to use a remote repository rather than keeping all your work
local?

    Using a remote repository instead of than keeping all your work local is useful 
    when you want to share your repository with one or more people. This is
    especially necessary when coding projects become collaborative with one or
    multiple other people contributing to the project. Rather than send each other
    emails of the entire repo once in a while, and having one person merge all
    the new commits to their own branch, Github allows all collaborators to 
    directly push new commits onto the public branch.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If Git automatically stayed up-to-date with your remote repository, 
    you would lose all the work on your local directory that you have not 
    yet pushed to the remote repository. In other words, the automatic pulls
    would keep reverting your local directory back to the most recent commit
    you made on Github, or even updating your directory with another person's
    commit! Either way, you would lose your work-in-progress.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    When you *fork*, or ask Github to make a copy of another person's 
    repository for you to then *clone* onto your local repository, you wouldn't 
    be able to make changes to that person's original repository. If you are 
    directly contributing to their repository, you would have *cloned* their 
    original Github repository onto your local repository, then contributed
    commits that they would be able to see.

    While forks and clones are results of copying an entire repository, 
    branches only refer to a part of a repository unless the entire repository
    only has one branch (i.e. the master branch). Recall that branches are 
    a series of commits that branch off of a previous commit for various 
    purposes like the experimental development of a new feature or for fixing 
    bugs without having to worry about accidentally breaking something else 
    during the process and not having a working copy to revert back to easily.

    These branches may eventually be merged into the master branch or remain
    a separate branch for others to clone onto their local repositories for 
    testing purposes.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Fill in your answer here

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here